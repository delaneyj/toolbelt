// Code generated by qtc from "crud.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line zombiezen/crud.qtpl:1
package zombiezen

//line zombiezen/crud.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line zombiezen/crud.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line zombiezen/crud.qtpl:1
func StreamGenerateCRUD(qw422016 *qt422016.Writer, t *GenerateCRUDTable) {
//line zombiezen/crud.qtpl:1
	qw422016.N().S(`
// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package `)
//line zombiezen/crud.qtpl:4
	qw422016.E().S(t.PackageName.Lower)
//line zombiezen/crud.qtpl:4
	qw422016.N().S(`

import (
    "fmt"
    `)
//line zombiezen/crud.qtpl:8
	if t.NeedsTimePackage {
//line zombiezen/crud.qtpl:8
		qw422016.N().S(`"time"`)
//line zombiezen/crud.qtpl:8
	}
//line zombiezen/crud.qtpl:8
	qw422016.N().S(`
    "zombiezen.com/go/sqlite"
    `)
//line zombiezen/crud.qtpl:10
	if t.NeedsTimePackage {
//line zombiezen/crud.qtpl:10
		qw422016.N().S(`"github.com/delaneyj/toolbelt"`)
//line zombiezen/crud.qtpl:10
	}
//line zombiezen/crud.qtpl:10
	qw422016.N().S(`
)

type `)
//line zombiezen/crud.qtpl:13
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:13
	qw422016.N().S(`Model struct {
`)
//line zombiezen/crud.qtpl:14
	for _, f := range t.Fields {
//line zombiezen/crud.qtpl:14
		qw422016.N().S(`        `)
//line zombiezen/crud.qtpl:15
		qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:15
		qw422016.N().S(` `)
//line zombiezen/crud.qtpl:15
		if f.IsNullable {
//line zombiezen/crud.qtpl:15
			qw422016.N().S(`*`)
//line zombiezen/crud.qtpl:15
		}
//line zombiezen/crud.qtpl:15
		qw422016.E().S(f.GoType.Original)
//line zombiezen/crud.qtpl:15
		qw422016.N().S(` `)
//line zombiezen/crud.qtpl:15
		qw422016.N().S("`")
//line zombiezen/crud.qtpl:15
		qw422016.N().S(`json:"`)
//line zombiezen/crud.qtpl:15
		qw422016.E().S(f.Name.Lower)
//line zombiezen/crud.qtpl:15
		qw422016.N().S(`"`)
//line zombiezen/crud.qtpl:15
		qw422016.N().S("`")
//line zombiezen/crud.qtpl:15
		qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:16
	}
//line zombiezen/crud.qtpl:16
	qw422016.N().S(`}


type Create`)
//line zombiezen/crud.qtpl:20
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:20
	qw422016.N().S(`Stmt struct {
    stmt *sqlite.Stmt
}

func Create`)
//line zombiezen/crud.qtpl:24
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:24
	qw422016.N().S(`(tx *sqlite.Conn) *Create`)
//line zombiezen/crud.qtpl:24
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:24
	qw422016.N().S(`Stmt {
    stmt := tx.Prep(`)
//line zombiezen/crud.qtpl:24
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:24
	qw422016.N().S(`
INSERT INTO `)
//line zombiezen/crud.qtpl:26
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:26
	qw422016.N().S(` (
`)
//line zombiezen/crud.qtpl:27
	for i, f := range t.Fields {
//line zombiezen/crud.qtpl:27
		qw422016.N().S(`        `)
//line zombiezen/crud.qtpl:28
		qw422016.E().S(f.Name.Lower)
//line zombiezen/crud.qtpl:28
		if i < len(t.Fields)-1 {
//line zombiezen/crud.qtpl:28
			qw422016.N().S(`,`)
//line zombiezen/crud.qtpl:28
		}
//line zombiezen/crud.qtpl:28
		qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:29
	}
//line zombiezen/crud.qtpl:29
	qw422016.N().S(`) VALUES (
`)
//line zombiezen/crud.qtpl:31
	for i := range t.Fields {
//line zombiezen/crud.qtpl:31
		qw422016.N().S(`        ?`)
//line zombiezen/crud.qtpl:32
		if i < len(t.Fields)-1 {
//line zombiezen/crud.qtpl:32
			qw422016.N().S(`,`)
//line zombiezen/crud.qtpl:32
		}
//line zombiezen/crud.qtpl:32
		qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:33
	}
//line zombiezen/crud.qtpl:33
	qw422016.N().S(`)
    `)
//line zombiezen/crud.qtpl:33
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:33
	qw422016.N().S(`)
    return &Create`)
//line zombiezen/crud.qtpl:36
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:36
	qw422016.N().S(`Stmt{stmt: stmt}
}

func (ps *Create`)
//line zombiezen/crud.qtpl:39
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:39
	qw422016.N().S(`Stmt) Run(m *`)
//line zombiezen/crud.qtpl:39
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:39
	qw422016.N().S(`Model) error {
    defer ps.stmt.Reset()

    // Bind parameters
    `)
//line zombiezen/crud.qtpl:43
	streambindFields(qw422016, t)
//line zombiezen/crud.qtpl:43
	qw422016.N().S(`

    if _, err := ps.stmt.Step(); err != nil {
        return fmt.Errorf("failed to insert `)
//line zombiezen/crud.qtpl:46
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:46
	qw422016.N().S(`: %w", err)
    }

    return nil
}

func OnceCreate`)
//line zombiezen/crud.qtpl:52
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:52
	qw422016.N().S(`(tx *sqlite.Conn, m *`)
//line zombiezen/crud.qtpl:52
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:52
	qw422016.N().S(`Model) error {
    ps := Create`)
//line zombiezen/crud.qtpl:53
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:53
	qw422016.N().S(`(tx)
    return ps.Run(m)
}

type ReadAll`)
//line zombiezen/crud.qtpl:57
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:57
	qw422016.N().S(`Stmt struct {
    stmt *sqlite.Stmt
}

func ReadAll`)
//line zombiezen/crud.qtpl:61
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:61
	qw422016.N().S(`(tx *sqlite.Conn) *ReadAll`)
//line zombiezen/crud.qtpl:61
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:61
	qw422016.N().S(`Stmt {
    stmt := tx.Prep(`)
//line zombiezen/crud.qtpl:61
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:61
	qw422016.N().S(`
SELECT
`)
//line zombiezen/crud.qtpl:64
	for i, f := range t.Fields {
//line zombiezen/crud.qtpl:64
		qw422016.N().S(`        `)
//line zombiezen/crud.qtpl:65
		qw422016.E().S(f.Name.Lower)
//line zombiezen/crud.qtpl:65
		if i < len(t.Fields)-1 {
//line zombiezen/crud.qtpl:65
			qw422016.N().S(`,`)
//line zombiezen/crud.qtpl:65
		}
//line zombiezen/crud.qtpl:65
		qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:66
	}
//line zombiezen/crud.qtpl:66
	qw422016.N().S(`FROM `)
//line zombiezen/crud.qtpl:67
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:67
	qw422016.N().S(`
    `)
//line zombiezen/crud.qtpl:67
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:67
	qw422016.N().S(`)
    return &ReadAll`)
//line zombiezen/crud.qtpl:69
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:69
	qw422016.N().S(`Stmt{stmt: stmt}
}

func (ps *ReadAll`)
//line zombiezen/crud.qtpl:72
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:72
	qw422016.N().S(`Stmt) Run() ([]*`)
//line zombiezen/crud.qtpl:72
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:72
	qw422016.N().S(`Model, error) {
    defer ps.stmt.Reset()

    var models []*`)
//line zombiezen/crud.qtpl:75
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:75
	qw422016.N().S(`Model
    for {
        hasRow, err := ps.stmt.Step()
        if err != nil {
            return nil, fmt.Errorf("failed to read `)
//line zombiezen/crud.qtpl:79
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:79
	qw422016.N().S(`: %w", err)
        } else if !hasRow {
            break
        }

        m := &`)
//line zombiezen/crud.qtpl:84
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:84
	qw422016.N().S(`Model{}
        `)
//line zombiezen/crud.qtpl:85
	streamfillResStruct(qw422016, t)
//line zombiezen/crud.qtpl:85
	qw422016.N().S(`

        models = append(models, m)
    }

    return models, nil
}

func OnceReadAll`)
//line zombiezen/crud.qtpl:93
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:93
	qw422016.N().S(`(tx *sqlite.Conn) ([]*`)
//line zombiezen/crud.qtpl:93
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:93
	qw422016.N().S(`Model, error) {
    ps := ReadAll`)
//line zombiezen/crud.qtpl:94
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:94
	qw422016.N().S(`(tx)
    return ps.Run()
}

`)
//line zombiezen/crud.qtpl:98
	if t.HasID {
//line zombiezen/crud.qtpl:98
		qw422016.N().S(`type ReadByID`)
//line zombiezen/crud.qtpl:99
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:99
		qw422016.N().S(`Stmt struct {
    stmt *sqlite.Stmt
}

func ReadByID`)
//line zombiezen/crud.qtpl:103
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:103
		qw422016.N().S(`(tx *sqlite.Conn) *ReadByID`)
//line zombiezen/crud.qtpl:103
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:103
		qw422016.N().S(`Stmt {
    stmt := tx.Prep(`)
//line zombiezen/crud.qtpl:103
		qw422016.N().S("`")
//line zombiezen/crud.qtpl:103
		qw422016.N().S(`
SELECT
`)
//line zombiezen/crud.qtpl:106
		for i, f := range t.Fields {
//line zombiezen/crud.qtpl:106
			qw422016.N().S(`        `)
//line zombiezen/crud.qtpl:107
			qw422016.E().S(f.Name.Lower)
//line zombiezen/crud.qtpl:107
			if i < len(t.Fields)-1 {
//line zombiezen/crud.qtpl:107
				qw422016.N().S(`,`)
//line zombiezen/crud.qtpl:107
			}
//line zombiezen/crud.qtpl:107
			qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:108
		}
//line zombiezen/crud.qtpl:108
		qw422016.N().S(`FROM `)
//line zombiezen/crud.qtpl:109
		qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:109
		qw422016.N().S(`
WHERE id = ?
    `)
//line zombiezen/crud.qtpl:109
		qw422016.N().S("`")
//line zombiezen/crud.qtpl:109
		qw422016.N().S(`)
    return &ReadByID`)
//line zombiezen/crud.qtpl:112
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:112
		qw422016.N().S(`Stmt{stmt: stmt}
}

func (ps *ReadByID`)
//line zombiezen/crud.qtpl:115
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:115
		qw422016.N().S(`Stmt) Run(id int64) (*`)
//line zombiezen/crud.qtpl:115
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:115
		qw422016.N().S(`Model, error) {
    defer ps.stmt.Reset()

    ps.stmt.BindInt64(1, id)

    if hasRow, err := ps.stmt.Step(); err != nil {
        return nil, fmt.Errorf("failed to read `)
//line zombiezen/crud.qtpl:121
		qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:121
		qw422016.N().S(`: %w", err)
    } else if !hasRow {
        return nil, nil
    }

    m := &`)
//line zombiezen/crud.qtpl:126
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:126
		qw422016.N().S(`Model{}
    `)
//line zombiezen/crud.qtpl:127
		streamfillResStruct(qw422016, t)
//line zombiezen/crud.qtpl:127
		qw422016.N().S(`

    return m, nil
}

func OnceReadByID`)
//line zombiezen/crud.qtpl:132
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:132
		qw422016.N().S(`(tx *sqlite.Conn, id int64) (*`)
//line zombiezen/crud.qtpl:132
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:132
		qw422016.N().S(`Model, error) {
    ps := ReadByID`)
//line zombiezen/crud.qtpl:133
		qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:133
		qw422016.N().S(`(tx)
    return ps.Run(id)
}
`)
//line zombiezen/crud.qtpl:136
	}
//line zombiezen/crud.qtpl:136
	qw422016.N().S(`
func Count`)
//line zombiezen/crud.qtpl:138
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:138
	qw422016.N().S(`(tx *sqlite.Conn) (int64, error) {
    stmt := tx.Prep(`)
//line zombiezen/crud.qtpl:138
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:138
	qw422016.N().S(`
SELECT COUNT(*)
FROM `)
//line zombiezen/crud.qtpl:141
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:141
	qw422016.N().S(`
    `)
//line zombiezen/crud.qtpl:141
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:141
	qw422016.N().S(`)
    defer stmt.Reset()

    if hasRow, err := stmt.Step(); err != nil {
        return 0, fmt.Errorf("failed to count `)
//line zombiezen/crud.qtpl:146
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:146
	qw422016.N().S(`: %w", err)
    } else if !hasRow {
        return 0, nil
    }

    return stmt.ColumnInt64(0), nil
}

func OnceCount`)
//line zombiezen/crud.qtpl:154
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:154
	qw422016.N().S(`(tx *sqlite.Conn) (int64, error) {
    return Count`)
//line zombiezen/crud.qtpl:155
	qw422016.E().S(t.Name.Pascal)
//line zombiezen/crud.qtpl:155
	qw422016.N().S(`(tx)
}

type Update`)
//line zombiezen/crud.qtpl:158
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:158
	qw422016.N().S(`Stmt struct {
    stmt *sqlite.Stmt
}

func Update`)
//line zombiezen/crud.qtpl:162
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:162
	qw422016.N().S(`(tx *sqlite.Conn) *Update`)
//line zombiezen/crud.qtpl:162
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:162
	qw422016.N().S(`Stmt {
    stmt := tx.Prep(`)
//line zombiezen/crud.qtpl:162
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:162
	qw422016.N().S(`
UPDATE `)
//line zombiezen/crud.qtpl:164
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:164
	qw422016.N().S(`
SET
`)
//line zombiezen/crud.qtpl:166
	for i, f := range t.Fields {
//line zombiezen/crud.qtpl:167
		if i > 0 {
//line zombiezen/crud.qtpl:167
			qw422016.N().S(`        `)
//line zombiezen/crud.qtpl:168
			qw422016.E().S(f.Name.Lower)
//line zombiezen/crud.qtpl:168
			qw422016.N().S(` = ?`)
//line zombiezen/crud.qtpl:168
			qw422016.N().D(i + 1)
//line zombiezen/crud.qtpl:168
			if i < len(t.Fields)-1 {
//line zombiezen/crud.qtpl:168
				qw422016.N().S(`,`)
//line zombiezen/crud.qtpl:168
			}
//line zombiezen/crud.qtpl:168
			qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:169
		}
//line zombiezen/crud.qtpl:170
	}
//line zombiezen/crud.qtpl:170
	qw422016.N().S(`WHERE id = ?1
    `)
//line zombiezen/crud.qtpl:170
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:170
	qw422016.N().S(`)
    return &Update`)
//line zombiezen/crud.qtpl:173
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:173
	qw422016.N().S(`Stmt{stmt: stmt}
}

func (ps *Update`)
//line zombiezen/crud.qtpl:176
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:176
	qw422016.N().S(`Stmt) Run(m *`)
//line zombiezen/crud.qtpl:176
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:176
	qw422016.N().S(`Model) error {
    defer ps.stmt.Reset()

    // Bind parameters
    `)
//line zombiezen/crud.qtpl:180
	streambindFields(qw422016, t)
//line zombiezen/crud.qtpl:180
	qw422016.N().S(`

    if _, err := ps.stmt.Step(); err != nil {
        return fmt.Errorf("failed to update `)
//line zombiezen/crud.qtpl:183
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:183
	qw422016.N().S(`: %w", err)
    }

    return nil
}

func OnceUpdate`)
//line zombiezen/crud.qtpl:189
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:189
	qw422016.N().S(`(tx *sqlite.Conn, m *`)
//line zombiezen/crud.qtpl:189
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:189
	qw422016.N().S(`Model) error {
    ps := Update`)
//line zombiezen/crud.qtpl:190
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:190
	qw422016.N().S(`(tx)
    return ps.Run(m)
}

type Delete`)
//line zombiezen/crud.qtpl:194
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:194
	qw422016.N().S(`Stmt struct {
    stmt *sqlite.Stmt
}

func Delete`)
//line zombiezen/crud.qtpl:198
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:198
	qw422016.N().S(`(tx *sqlite.Conn) *Delete`)
//line zombiezen/crud.qtpl:198
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:198
	qw422016.N().S(`Stmt {
    stmt := tx.Prep(`)
//line zombiezen/crud.qtpl:198
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:198
	qw422016.N().S(`
DELETE FROM `)
//line zombiezen/crud.qtpl:200
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:200
	qw422016.N().S(`
WHERE id = ?
    `)
//line zombiezen/crud.qtpl:200
	qw422016.N().S("`")
//line zombiezen/crud.qtpl:200
	qw422016.N().S(`)
    return &Delete`)
//line zombiezen/crud.qtpl:203
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:203
	qw422016.N().S(`Stmt{stmt: stmt}
}

func (ps *Delete`)
//line zombiezen/crud.qtpl:206
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:206
	qw422016.N().S(`Stmt) Run(id int64) error {
    defer ps.stmt.Reset()

    ps.stmt.BindInt64(1, id)

    if _, err := ps.stmt.Step(); err != nil {
        return fmt.Errorf("failed to delete `)
//line zombiezen/crud.qtpl:212
	qw422016.E().S(t.Name.Lower)
//line zombiezen/crud.qtpl:212
	qw422016.N().S(`: %w", err)
    }

    return nil
}

func OnceDelete`)
//line zombiezen/crud.qtpl:218
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:218
	qw422016.N().S(`(tx *sqlite.Conn, id int64) error {
    ps := Delete`)
//line zombiezen/crud.qtpl:219
	qw422016.E().S(t.SingleName.Pascal)
//line zombiezen/crud.qtpl:219
	qw422016.N().S(`(tx)
    return ps.Run(id)
}

`)
//line zombiezen/crud.qtpl:223
}

//line zombiezen/crud.qtpl:223
func WriteGenerateCRUD(qq422016 qtio422016.Writer, t *GenerateCRUDTable) {
//line zombiezen/crud.qtpl:223
	qw422016 := qt422016.AcquireWriter(qq422016)
//line zombiezen/crud.qtpl:223
	StreamGenerateCRUD(qw422016, t)
//line zombiezen/crud.qtpl:223
	qt422016.ReleaseWriter(qw422016)
//line zombiezen/crud.qtpl:223
}

//line zombiezen/crud.qtpl:223
func GenerateCRUD(t *GenerateCRUDTable) string {
//line zombiezen/crud.qtpl:223
	qb422016 := qt422016.AcquireByteBuffer()
//line zombiezen/crud.qtpl:223
	WriteGenerateCRUD(qb422016, t)
//line zombiezen/crud.qtpl:223
	qs422016 := string(qb422016.B)
//line zombiezen/crud.qtpl:223
	qt422016.ReleaseByteBuffer(qb422016)
//line zombiezen/crud.qtpl:223
	return qs422016
//line zombiezen/crud.qtpl:223
}

//line zombiezen/crud.qtpl:225
func streambindFields(qw422016 *qt422016.Writer, tbl *GenerateCRUDTable) {
//line zombiezen/crud.qtpl:226
	for _, f := range tbl.Fields {
//line zombiezen/crud.qtpl:227
		if f.IsNullable {
//line zombiezen/crud.qtpl:227
			qw422016.N().S(`    if m.`)
//line zombiezen/crud.qtpl:228
			qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:228
			qw422016.N().S(` == nil {
        ps.stmt.BindNull(`)
//line zombiezen/crud.qtpl:229
			qw422016.N().D(f.Column)
//line zombiezen/crud.qtpl:229
			qw422016.N().S(`)
    } else {
        `)
//line zombiezen/crud.qtpl:231
			streambindField(qw422016, f, true)
//line zombiezen/crud.qtpl:231
			qw422016.N().S(`    }
`)
//line zombiezen/crud.qtpl:233
		} else {
//line zombiezen/crud.qtpl:233
			qw422016.N().S(`    `)
//line zombiezen/crud.qtpl:234
			streambindField(qw422016, f, false)
//line zombiezen/crud.qtpl:234
			qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:235
		}
//line zombiezen/crud.qtpl:236
	}
//line zombiezen/crud.qtpl:237
}

//line zombiezen/crud.qtpl:237
func writebindFields(qq422016 qtio422016.Writer, tbl *GenerateCRUDTable) {
//line zombiezen/crud.qtpl:237
	qw422016 := qt422016.AcquireWriter(qq422016)
//line zombiezen/crud.qtpl:237
	streambindFields(qw422016, tbl)
//line zombiezen/crud.qtpl:237
	qt422016.ReleaseWriter(qw422016)
//line zombiezen/crud.qtpl:237
}

//line zombiezen/crud.qtpl:237
func bindFields(tbl *GenerateCRUDTable) string {
//line zombiezen/crud.qtpl:237
	qb422016 := qt422016.AcquireByteBuffer()
//line zombiezen/crud.qtpl:237
	writebindFields(qb422016, tbl)
//line zombiezen/crud.qtpl:237
	qs422016 := string(qb422016.B)
//line zombiezen/crud.qtpl:237
	qt422016.ReleaseByteBuffer(qb422016)
//line zombiezen/crud.qtpl:237
	return qs422016
//line zombiezen/crud.qtpl:237
}

//line zombiezen/crud.qtpl:239
func streambindField(qw422016 *qt422016.Writer, f GenerateField, isNullable bool) {
//line zombiezen/crud.qtpl:239
	qw422016.N().S(`    ps.`)
//line zombiezen/crud.qtpl:240
	switch f.GoType.Original {
//line zombiezen/crud.qtpl:241
	case "time.Time":
//line zombiezen/crud.qtpl:241
		qw422016.N().S(`            stmt.Bind`)
//line zombiezen/crud.qtpl:242
		qw422016.E().S(f.SQLType.Pascal)
//line zombiezen/crud.qtpl:242
		qw422016.N().S(`(`)
//line zombiezen/crud.qtpl:242
		qw422016.N().D(f.Column)
//line zombiezen/crud.qtpl:242
		qw422016.N().S(`, toolbelt.TimeToJulianDay(`)
//line zombiezen/crud.qtpl:242
		if isNullable {
//line zombiezen/crud.qtpl:242
			qw422016.N().S(`*`)
//line zombiezen/crud.qtpl:242
		}
//line zombiezen/crud.qtpl:242
		qw422016.N().S(` m.`)
//line zombiezen/crud.qtpl:242
		qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:242
		qw422016.N().S(`))
`)
//line zombiezen/crud.qtpl:243
	case "time.Duration":
//line zombiezen/crud.qtpl:243
		qw422016.N().S(`            stmt.Bind`)
//line zombiezen/crud.qtpl:244
		qw422016.E().S(f.SQLType.Pascal)
//line zombiezen/crud.qtpl:244
		qw422016.N().S(`(`)
//line zombiezen/crud.qtpl:244
		qw422016.N().D(f.Column)
//line zombiezen/crud.qtpl:244
		qw422016.N().S(`, toolbelt.DurationToMilliseconds(`)
//line zombiezen/crud.qtpl:244
		if isNullable {
//line zombiezen/crud.qtpl:244
			qw422016.N().S(`*`)
//line zombiezen/crud.qtpl:244
		}
//line zombiezen/crud.qtpl:244
		qw422016.N().S(`m.`)
//line zombiezen/crud.qtpl:244
		qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:244
		qw422016.N().S(`))
`)
//line zombiezen/crud.qtpl:245
	default:
//line zombiezen/crud.qtpl:245
		qw422016.N().S(`            stmt.Bind`)
//line zombiezen/crud.qtpl:246
		qw422016.E().S(f.SQLType.Pascal)
//line zombiezen/crud.qtpl:246
		qw422016.N().S(`(`)
//line zombiezen/crud.qtpl:246
		qw422016.N().D(f.Column)
//line zombiezen/crud.qtpl:246
		qw422016.N().S(`, `)
//line zombiezen/crud.qtpl:246
		if isNullable {
//line zombiezen/crud.qtpl:246
			qw422016.N().S(`*`)
//line zombiezen/crud.qtpl:246
		}
//line zombiezen/crud.qtpl:246
		qw422016.N().S(`m.`)
//line zombiezen/crud.qtpl:246
		qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:246
		qw422016.N().S(`)
`)
//line zombiezen/crud.qtpl:247
	}
//line zombiezen/crud.qtpl:248
}

//line zombiezen/crud.qtpl:248
func writebindField(qq422016 qtio422016.Writer, f GenerateField, isNullable bool) {
//line zombiezen/crud.qtpl:248
	qw422016 := qt422016.AcquireWriter(qq422016)
//line zombiezen/crud.qtpl:248
	streambindField(qw422016, f, isNullable)
//line zombiezen/crud.qtpl:248
	qt422016.ReleaseWriter(qw422016)
//line zombiezen/crud.qtpl:248
}

//line zombiezen/crud.qtpl:248
func bindField(f GenerateField, isNullable bool) string {
//line zombiezen/crud.qtpl:248
	qb422016 := qt422016.AcquireByteBuffer()
//line zombiezen/crud.qtpl:248
	writebindField(qb422016, f, isNullable)
//line zombiezen/crud.qtpl:248
	qs422016 := string(qb422016.B)
//line zombiezen/crud.qtpl:248
	qt422016.ReleaseByteBuffer(qb422016)
//line zombiezen/crud.qtpl:248
	return qs422016
//line zombiezen/crud.qtpl:248
}

//line zombiezen/crud.qtpl:250
func streamfillResStruct(qw422016 *qt422016.Writer, t *GenerateCRUDTable) {
//line zombiezen/crud.qtpl:250
	qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:252
	for i, f := range t.Fields {
//line zombiezen/crud.qtpl:253
		if f.IsNullable {
//line zombiezen/crud.qtpl:253
			qw422016.N().S(`    if ps.stmt.ColumnIsNull(`)
//line zombiezen/crud.qtpl:254
			qw422016.N().D(i)
//line zombiezen/crud.qtpl:254
			qw422016.N().S(`) {
        m.`)
//line zombiezen/crud.qtpl:255
			qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:255
			qw422016.N().S(` = nil
    } else {
        tmp :=  `)
//line zombiezen/crud.qtpl:257
			streamfillResStructField(qw422016, f, i)
//line zombiezen/crud.qtpl:257
			qw422016.N().S(`        m.`)
//line zombiezen/crud.qtpl:258
			qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:258
			qw422016.N().S(` = &tmp
    }
`)
//line zombiezen/crud.qtpl:260
		} else {
//line zombiezen/crud.qtpl:260
			qw422016.N().S(`    m.`)
//line zombiezen/crud.qtpl:261
			qw422016.E().S(f.Name.Pascal)
//line zombiezen/crud.qtpl:261
			qw422016.N().S(` = `)
//line zombiezen/crud.qtpl:261
			streamfillResStructField(qw422016, f, i)
//line zombiezen/crud.qtpl:261
			qw422016.N().S(`
`)
//line zombiezen/crud.qtpl:262
		}
//line zombiezen/crud.qtpl:263
	}
//line zombiezen/crud.qtpl:264
}

//line zombiezen/crud.qtpl:264
func writefillResStruct(qq422016 qtio422016.Writer, t *GenerateCRUDTable) {
//line zombiezen/crud.qtpl:264
	qw422016 := qt422016.AcquireWriter(qq422016)
//line zombiezen/crud.qtpl:264
	streamfillResStruct(qw422016, t)
//line zombiezen/crud.qtpl:264
	qt422016.ReleaseWriter(qw422016)
//line zombiezen/crud.qtpl:264
}

//line zombiezen/crud.qtpl:264
func fillResStruct(t *GenerateCRUDTable) string {
//line zombiezen/crud.qtpl:264
	qb422016 := qt422016.AcquireByteBuffer()
//line zombiezen/crud.qtpl:264
	writefillResStruct(qb422016, t)
//line zombiezen/crud.qtpl:264
	qs422016 := string(qb422016.B)
//line zombiezen/crud.qtpl:264
	qt422016.ReleaseByteBuffer(qb422016)
//line zombiezen/crud.qtpl:264
	return qs422016
//line zombiezen/crud.qtpl:264
}

//line zombiezen/crud.qtpl:266
func streamfillResStructField(qw422016 *qt422016.Writer, f GenerateField, i int) {
//line zombiezen/crud.qtpl:267
	switch f.GoType.Original {
//line zombiezen/crud.qtpl:268
	case "time.Time":
//line zombiezen/crud.qtpl:268
		qw422016.N().S(`            toolbelt.JulianDayToTime(ps.stmt.Column`)
//line zombiezen/crud.qtpl:269
		qw422016.E().S(f.SQLType.Pascal)
//line zombiezen/crud.qtpl:269
		qw422016.N().S(`(`)
//line zombiezen/crud.qtpl:269
		qw422016.N().D(i)
//line zombiezen/crud.qtpl:269
		qw422016.N().S(`))
`)
//line zombiezen/crud.qtpl:270
	case "time.Duration":
//line zombiezen/crud.qtpl:270
		qw422016.N().S(`            toolbelt.MillisecondsToDuration(ps.stmt.Column`)
//line zombiezen/crud.qtpl:271
		qw422016.E().S(f.SQLType.Pascal)
//line zombiezen/crud.qtpl:271
		qw422016.N().S(`(`)
//line zombiezen/crud.qtpl:271
		qw422016.N().D(i)
//line zombiezen/crud.qtpl:271
		qw422016.N().S(`))
`)
//line zombiezen/crud.qtpl:272
	case "[]byte":
//line zombiezen/crud.qtpl:272
		qw422016.N().S(`            toolbelt.StmtBytesByCol(ps.stmt, `)
//line zombiezen/crud.qtpl:273
		qw422016.N().D(i)
//line zombiezen/crud.qtpl:273
		qw422016.N().S(`)
`)
//line zombiezen/crud.qtpl:274
	default:
//line zombiezen/crud.qtpl:274
		qw422016.N().S(`            ps.stmt.Column`)
//line zombiezen/crud.qtpl:275
		qw422016.E().S(f.SQLType.Pascal)
//line zombiezen/crud.qtpl:275
		qw422016.N().S(`(`)
//line zombiezen/crud.qtpl:275
		qw422016.N().D(i)
//line zombiezen/crud.qtpl:275
		qw422016.N().S(`)
`)
//line zombiezen/crud.qtpl:276
	}
//line zombiezen/crud.qtpl:277
}

//line zombiezen/crud.qtpl:277
func writefillResStructField(qq422016 qtio422016.Writer, f GenerateField, i int) {
//line zombiezen/crud.qtpl:277
	qw422016 := qt422016.AcquireWriter(qq422016)
//line zombiezen/crud.qtpl:277
	streamfillResStructField(qw422016, f, i)
//line zombiezen/crud.qtpl:277
	qt422016.ReleaseWriter(qw422016)
//line zombiezen/crud.qtpl:277
}

//line zombiezen/crud.qtpl:277
func fillResStructField(f GenerateField, i int) string {
//line zombiezen/crud.qtpl:277
	qb422016 := qt422016.AcquireByteBuffer()
//line zombiezen/crud.qtpl:277
	writefillResStructField(qb422016, f, i)
//line zombiezen/crud.qtpl:277
	qs422016 := string(qb422016.B)
//line zombiezen/crud.qtpl:277
	qt422016.ReleaseByteBuffer(qb422016)
//line zombiezen/crud.qtpl:277
	return qs422016
//line zombiezen/crud.qtpl:277
}
