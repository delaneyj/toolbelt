{% func goServerTemplate(pkg *packageTmplData) %}
// Code generated by protoc-gen-go-natsrpc. DO NOT EDIT.

package {%s pkg.PackageName.Snake %}

import (
    "context"
    "errors"
    "fmt"
    "log"

    "github.com/nats-io/nats.go"
    "google.golang.org/protobuf/proto"
    "gopkg.in/typ.v4/sync2"
)

{%- for _, service := range pkg.Services -%}
    {%- code
        nsp := service.Name.Pascal
    -%}

type {%s nsp %}Service interface {
    OnClose() error

    //#region Methods!
    {%- for _, method := range service.Methods -%}
        {%- code
        cs := method.IsClientStreaming
        ss := method.IsServerStreaming
        -%}
        {%- switch  -%}
        {%- case !cs && !ss  -%}
			{%s method.Name.Pascal %}(ctx context.Context, req *{%s method.InputType.Original %}) (res *{%s method.OutputType.Original %}, err error) // Unary call for {%s method.Name.Pascal %}
        {%- case cs && !ss -%}
            {%s method.Name.Pascal %}(ctx context.Context, reqCh <-chan *{%s method.InputType.Original %}) (res *{%s method.OutputType.Original %}, err error) // Client streaming call for {%s method.Name.Pascal %}
        {%- case !cs && ss -%}
			{%s method.Name.Pascal %}(ctx context.Context, req *{%s method.InputType.Original %}, resCh chan<- *{%s method.OutputType.Original %}) (err  error) // Server streaming call for {%s method.Name.Pascal %}
        {%- case cs && ss -%}
			{%s method.Name.Pascal %}(ctx context.Context, reqCh <-chan *{%s method.InputType.Original %}, resCh chan<- *{%s method.OutputType.Original %}, errCh chan<- error) error // Bidirectional streaming call for {%s method.Name.Pascal %}
        {%- endswitch -%}
    {%- endfor -%}
    //#endregion
}

const {%s nsp %}ServiceSubject = "{%s service.Subject %}"

type {%s nsp %}ServiceRunner struct {
    baseSubject string
    service {%s nsp %}Service
    nc *nats.Conn
	subs []*nats.Subscription
}

func New{%s nsp %}ServiceRunnerSingleton(ctx context.Context, nc *nats.Conn, service {%s nsp %}Service) (*{%s nsp %}ServiceRunner, error) {
	return New{%s nsp %}ServiceRunner(ctx, nc, service, 0)
}

func New{%s nsp %}ServiceRunner(ctx context.Context, nc *nats.Conn, service {%s nsp %}Service, instanceID int64) (*{%s nsp %}ServiceRunner, error) {
	subjectSuffix := ""
	if instanceID > 0 {
		subjectSuffix = fmt.Sprintf(".%d", instanceID)
	}

	baseSubject := fmt.Sprintf("{%s service.Subject %}%s", subjectSuffix)
	{%- for _, method := range service.Methods -%}
       {%s method.Name.Camel %}Subject := baseSubject + ".{%s method.Name.Kebab %}"
    {%- endfor -%}

    runner := &{%s nsp %}ServiceRunner{
        service: service,
        nc: nc,
    }

	{% if len(service.Methods) > 0 %}
		var (
			sub *nats.Subscription
			err error
		)
    {%- for _, method := range service.Methods -%}
        {%- code
            subjectName := method.Name.Camel + "Subject"
            ss,cs := method.IsServerStreaming, method.IsClientStreaming
        -%}
        {%- switch  -%}
        {%- case !cs && !ss  -%}
            {%= goServerUnaryHandler(subjectName, method) %}
        {%- case cs && !ss -%}
			{%= goServerClientStreamHandler(subjectName, method) %}
        {%- case !cs && ss -%}
            {%= goServerServerStreamHandler(subjectName, method) %}
        {%- case cs && ss -%}
			{%= goServerBidiStreamHandler(subjectName, method) %}
        {%- endswitch -%}
		if err != nil {
			return nil, fmt.Errorf("failed to subscribe to {%s method.Name.Pascal %}: %w", err)
		}
		runner.subs = append(runner.subs, sub)
    {%- endfor -%}
	{% endif %}

    return runner,nil
}

func (runner *{%s nsp %}ServiceRunner) Close() error {
    var errs []error

	for _, sub := range runner.subs {
		if err := sub.Unsubscribe(); err != nil {
			errs = append(errs, err)
		}
	}

    if runner.service != nil {
        if err := runner.service.OnClose(); err != nil {
            errs = append(errs, err)
        }
    }

    if err := errors.Join(errs...); err != nil {
        return fmt.Errorf("failed to close runner: %w", err)
    }

    return nil
}

{%- endfor -%}

{% endfunc %}


{% func goServerUnaryHandler(subjectName string, method *methodTmplData) %}
// Unary call for {%s method.Name.Pascal %}
sub, err = nc.Subscribe({%s subjectName %}, func(msg *nats.Msg) {
        req := &{%s method.InputType.Original %}{}
		if err := proto.Unmarshal(msg.Data, req); err != nil {
			sendError(msg, fmt.Errorf("failed to unmarshal request: %w", err))
			return
		}

		res, err := runner.service.{%s method.Name.Pascal %}(context.Background(),req)
		if err != nil {
			sendError(msg, err)
			return
		}
		sendSuccess(msg, res)
	})
{% endfunc %}

{% func goServerClientStreamHandler(subjectName string, method *methodTmplData) %}
{% code
reqChName := method.Name.Camel + "ClientReqChs"
inputName := method.InputType.Original
%}
// Client streaming call for {%s method.Name.Pascal %}
{%s reqChName %} := sync2.Map[string, chan *{%s= inputName  %}]{}
sub, err = nc.Subscribe({%s subjectName %}, func(msg *nats.Msg) {
		// Check for end of stream
		if len(msg.Data) == 0 {
			log.Printf("Got EOF")
			reqCh, ok := {%s reqChName %}.Load(msg.Reply)
			if !ok {
				sendError(msg, errors.New("no request channel found"))
				return
			}
			close(reqCh)
			{%s reqChName %}.Delete(msg.Reply)
			return
		}

		// Check for request
		req := &{%s= inputName  %}{}
		if err := proto.Unmarshal(msg.Data, req); err != nil {
			sendError(msg, fmt.Errorf("failed to unmarshal request: %w", err))
			return
		}

		log.Printf("Got request: %v", req)

		// Check for request channel
		reqCh, ok := {%s reqChName %}.Load(msg.Reply)
		if !ok {
			reqCh = make(chan *{%s= inputName  %})

			{%s reqChName %}.Store(msg.Reply, reqCh)

			go func() {
				res, err := runner.service.{%s method.Name.Pascal %}(context.Background(),reqCh)
				if err != nil {
					sendError(msg, err)
					return
				}
				sendSuccess(msg, res)
			}()
		}
		reqCh <- req
	})
{% endfunc %}

{% func goServerServerStreamHandler(subjectName string, method *methodTmplData) %}
// Server streaming call for {%s method.Name.Pascal %}
sub, err = nc.Subscribe({%s subjectName %}, func(msg *nats.Msg) {
    req := &{%s method.InputType.Original %}{}
    if err := proto.Unmarshal(msg.Data, req); err != nil {
        sendError(msg, fmt.Errorf("failed to unmarshal request: %w", err))
        return
    }

	go func() {
		resCh := make(chan *{%s method.OutputType.Original %})
		defer close(resCh)

		// Send responses to client
		go func () {
			defer sendEOF(msg)
			for {
				select {
				case res, ok := <-resCh:
					if !ok {
						return
					}
					sendSuccess(msg, res)
				}
			}
		}()

		// User defined handler, this will block until the context is done
		if err := runner.service.{%s method.Name.Pascal%}(ctx, req, resCh); err != nil {
			sendError(msg, err)
		}
	}()
})
{% endfunc %}

{% func goServerBidiStreamHandler(subjectName string, method *methodTmplData) %}
{% code
reqChName := method.Name.Camel + "BiReqChs"
inputName := method.InputType.Original
%}
// Bidirectional streaming call for {%s method.Name.Pascal %}
{%s reqChName %} := sync2.Map[string, chan *{%s= inputName  %}]{}
sub, err = nc.Subscribe({%s subjectName %}, func(msg *nats.Msg) {
		// Check for end of stream
		if len(msg.Data) == 0 {
			reqCh, ok := {%s reqChName %}.Load(msg.Reply)
			if !ok {
				sendError(msg, errors.New("no request channel found"))
				return
			}
			close(reqCh)
			{%s reqChName %}.Delete(msg.Reply)
			return
		}

		// Check for request
		req := &{%s= inputName  %}{}
		if err := proto.Unmarshal(msg.Data, req); err != nil {
			sendError(msg, fmt.Errorf("failed to unmarshal request: %w", err))
			return
		}

		// Check for request channel
		reqCh, ok := {%s reqChName %}.Load(msg.Reply)
		if !ok {
			reqCh = make(chan *{%s= inputName  %})
			{%s reqChName %}.Store(msg.Reply, reqCh)

			go func() {
				defer sendEOF(msg)

				resCh := make(chan *{%s method.OutputType.Original %})
				errCh := make(chan error)

				go func() {
					for {
						select {
						case res, ok := <-resCh:
							if !ok {
								return
							}
							sendSuccess(msg, res)
						case err := <-errCh:
							sendError(msg, err)
							return
						}
					}
				}()
				if err := runner.service.{%s method.Name.Pascal %}(context.Background(), reqCh, resCh, errCh); err != nil {
					sendError(msg, err)
					return
				}
			}()
		}
		reqCh <- req
	})
{% endfunc %}